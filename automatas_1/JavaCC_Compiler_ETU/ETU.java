/* ETU.java */
/* Generated By:JavaCC: Do not edit this line. ETU.java */
        //	Clase que implementa el parser
        public class ETU implements ETUConstants {
                //	Variables de clase
                private static ETU compiler;
                private static boolean band = true;

                //	MÃ©todo principal
                public static void main( String[] ETUArgs ){
                        //	Si el usuario escribe por consola
                        if ( ETUArgs.length == 0 ) {
                                System.out.println( "\u005cnConsola>> Escriba c\u00f3digo...\u005cn\u005ct" );
                                compiler = new ETU( System.in );
                        }else if(ETUArgs.length == 1){
                                System.out.println( "\u005cnConsola>> Leyendo del archivo " + ETUArgs[0] + " ...\u005cn\u005ct" );
                                try{
                                        compiler = new ETU( new java.io.FileInputStream( ETUArgs[0] ) );
                                } catch(java.io.FileNotFoundException e){
                                        System.out.println( "Consola>> El fichero " + ETUArgs[0] + " no ha sido encontrado." );
                                        return;
                                }
                        } else {
                                System.out.println("Consola>>   El uso es uno de:");
                        System.out.println("         java ETU < inputfile");
                        System.out.println("O");
                        System.out.println("         java ETU archivo");
                        return;
                        }

                        try{
                                compiler.start();
                                System.out.println( "\u005cnANALISIS SINT\u00c1CTICO TERMINADO." );
                        } catch(ParseException e){
                                System.out.println(e.getMessage());
                        System.out.println("Consola>>  Se encontraron errores durante el parseo.");
                        }
                }

                public static void showMessage(StringBuilder t, String msj) {

                        if (band) {
                                //System.out.printf("\t%-20s %s\n\n", "LEXEMA", "TOKEN");
                                band = false;
                        }
                        //System.out.printf("\t%-20s %s\n", t, msj);
                }

//	Declaracion gramaticas
  final public void start() throws ParseException {
    try {
      jj_consume_token(PR_INICIO);
      nombre();
      jj_consume_token(DEL_LLAVE_ABRE);
      instruccion();
      jj_consume_token(DEL_LLAVE_CIERRA);
      jj_consume_token(0);
    } catch (ParseException pe) {
System.out.println("Error en la declaracion:   \u005cn \u005ct" + pe.getMessage()) ;
                Token t;
                do {
                                                t = getNextToken();
                } while (t.kind != ETUTokenManager.EOF);
    }
  }

  final public void nombre() throws ParseException {
    jj_consume_token(ID);
  }

  final public void instruccion() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PR_SI:
      case PR_PARA:
      case PR_MIENTRAS:
      case PR_SINO:
      case PR_IMPRIMIR:
      case PR_LEER:
      case PR_HACER:
      case T_CADENA:
      case T_ENT:
      case T_DEC:
      case T_VF:
      case ID:{
        ;
        break;
        }
      default:
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_CADENA:
      case T_ENT:
      case T_DEC:
      case T_VF:
      case ID:{
        declaracion();
        break;
        }
      case PR_SI:
      case PR_SINO:{
        condicional();
        break;
        }
      case PR_PARA:
      case PR_MIENTRAS:
      case PR_HACER:{
        ciclo();
        break;
        }
      case PR_IMPRIMIR:
      case PR_LEER:{
        io();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void declaracion() throws ParseException {
    try {
      if (jj_2_1(5)) {
        declaracion_ni();
      } else if (jj_2_2(5)) {
        declaracion_i();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico declaracion: \u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != ")" || t.image != "." || t.image != "}");
    }
  }

  final public void declaracion_ni() throws ParseException {
    try {
      tipo();
      nombre();
      jj_consume_token(DEL_PUNTOYCOMA);
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico declaracion no inicializada: \u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != ")" || t.image != ";" || t.image != "}");
    }
  }

  final public void declaracion_i() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_CADENA:
      case T_ENT:
      case T_DEC:
      case T_VF:{
        tipo();
        nombre();
        jj_consume_token(OP_ASIG);
        valor();
        jj_consume_token(DEL_PUNTOYCOMA);
        break;
        }
      case ID:{
        nombre();
        jj_consume_token(OP_ASIG);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DEL_PARENTESIS_ABRE:
          case VAL_ENT:
          case VAL_DEC:
          case ID:{
            ;
            break;
            }
          default:
            break label_2;
          }
          expresion();
        }
        jj_consume_token(DEL_PUNTOYCOMA);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico declaracion inicializada: \u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != ")" || t.image != "." || t.image != "}");
    }
  }

  final public void tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_CADENA:{
      jj_consume_token(T_CADENA);
      break;
      }
    case T_ENT:{
      jj_consume_token(T_ENT);
      break;
      }
    case T_VF:{
      jj_consume_token(T_VF);
      break;
      }
    case T_DEC:{
      jj_consume_token(T_DEC);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void valor() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAL_CADENA:{
        jj_consume_token(VAL_CADENA);
        break;
        }
      case VAL_VF:{
        jj_consume_token(VAL_VF);
        break;
        }
      case DEL_PARENTESIS_ABRE:
      case VAL_ENT:
      case VAL_DEC:
      case ID:{
        expresion();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico valor invalido: \u005cnDetalles:\u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != ")" || t.image != "." || t.image != "}");
    }
  }

  final public void expresion() throws ParseException {
    if (jj_2_3(3)) {
      termino();
      jj_consume_token(OP_ADD);
      expresion();
    } else if (jj_2_4(3)) {
      termino();
      jj_consume_token(OP_SUB);
      expresion();
    } else if (jj_2_5(3)) {
      termino();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void termino() throws ParseException {
    if (jj_2_6(3)) {
      factor();
      jj_consume_token(OP_MUL);
      termino();
    } else if (jj_2_7(3)) {
      factor();
      jj_consume_token(OP_DIV);
      termino();
    } else if (jj_2_8(3)) {
      factor();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void factor() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEL_PARENTESIS_ABRE:{
        jj_consume_token(DEL_PARENTESIS_ABRE);
        expresion();
        jj_consume_token(DEL_PARENTESIS_CIERRA);
        break;
        }
      case ID:{
        nombre();
        break;
        }
      case VAL_ENT:{
        jj_consume_token(VAL_ENT);
        break;
        }
      case VAL_DEC:{
        jj_consume_token(VAL_DEC);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico en la expresion aritmetica: \u005cnDetalles:\u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != ")" || t.image != ";" || t.image != "}");
    }
  }

  final public void condicional() throws ParseException {
    try {
      if (jj_2_9(11)) {
        pif();
      } else if (jj_2_10(11)) {
        pif_else();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico en sentencias condicionales: \u005cnDetalles:\u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != "}");
    }
  }

  final public void pif() throws ParseException {
    try {
      jj_consume_token(PR_SI);
      jj_consume_token(DEL_PARENTESIS_ABRE);
      condicion();
      jj_consume_token(DEL_PARENTESIS_CIERRA);
      instruccion();
    } catch (ParseException pe) {
System.out.println("Hubo un error sintactico sentencia if: \u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while ( t.image != "}");
                condicional();
    }
  }

  final public void pif_else() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PR_SI:{
        jj_consume_token(PR_SI);
        jj_consume_token(DEL_PARENTESIS_ABRE);
        condicion();
        jj_consume_token(DEL_PARENTESIS_CIERRA);
        instruccion();
        jj_consume_token(PR_SINO);
        instruccion();
        break;
        }
      case PR_SINO:{
        jj_consume_token(PR_SINO);
        instruccion();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
System.out.println("Hubo un error sintactico sentencia if-else: \u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while ( t.image != "}");
                condicional();
    }
  }

  final public void condicion() throws ParseException {
    try {
      expresion();
      op_log();
      expresion();
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico en condicion: \u005cnDetalles:\u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != ")");
    }
  }

  final public void op_log() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OP_MENOR:{
      jj_consume_token(OP_MENOR);
      break;
      }
    case OP_MENOR_IGUAL:{
      jj_consume_token(OP_MENOR_IGUAL);
      break;
      }
    case OP_MAYOR_IGUAL:{
      jj_consume_token(OP_MAYOR_IGUAL);
      break;
      }
    case OP_MAYOR:{
      jj_consume_token(OP_MAYOR);
      break;
      }
    case OP_IGUAL:{
      jj_consume_token(OP_IGUAL);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ciclo() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PR_MIENTRAS:{
        pwhile();
        break;
        }
      case PR_HACER:{
        pdo_while();
        break;
        }
      case PR_PARA:{
        pfor();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico en ciclos: \u005cnDetalles:\u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != "}" || t.image != ";");
    }
  }

  final public void pwhile() throws ParseException {
    try {
      jj_consume_token(PR_MIENTRAS);
      jj_consume_token(DEL_PARENTESIS_ABRE);
      condicion();
      jj_consume_token(DEL_PARENTESIS_CIERRA);
      jj_consume_token(DEL_LLAVE_ABRE);
      instruccion();
      jj_consume_token(DEL_LLAVE_CIERRA);
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico en while: \u005cnDetalles:\u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != "}");
    }
  }

  final public void pdo_while() throws ParseException {
    try {
      jj_consume_token(PR_HACER);
      jj_consume_token(DEL_LLAVE_ABRE);
      instruccion();
      jj_consume_token(DEL_LLAVE_CIERRA);
      jj_consume_token(PR_MIENTRAS);
      jj_consume_token(DEL_PARENTESIS_ABRE);
      condicion();
      jj_consume_token(DEL_PARENTESIS_CIERRA);
      jj_consume_token(DEL_PUNTOYCOMA);
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sint\u00e1ctico en do-while: \u005cnDetalles:\u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != ";");
    }
  }

  final public void pfor() throws ParseException {
    jj_consume_token(PR_PARA);
    jj_consume_token(DEL_PARENTESIS_ABRE);
    declaracion_i();
    jj_consume_token(DEL_PUNTOYCOMA);
    condicion();
    jj_consume_token(DEL_PUNTOYCOMA);
    actualizacion();
    jj_consume_token(DEL_PARENTESIS_CIERRA);
    instruccion();
  }

  final public void actualizacion() throws ParseException {
    if (jj_2_11(2)) {
      nombre();
      jj_consume_token(OP_INC);
    } else if (jj_2_12(2)) {
      nombre();
      jj_consume_token(OP_DEC);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void actualizacion2() throws ParseException {
    if (jj_2_13(3)) {
      nombre();
      jj_consume_token(OP_INC);
      jj_consume_token(DEL_PUNTOYCOMA);
    } else if (jj_2_14(3)) {
      nombre();
      jj_consume_token(OP_DEC);
      jj_consume_token(DEL_PUNTOYCOMA);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void io() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PR_IMPRIMIR:{
      imprimir();
      break;
      }
    case PR_LEER:{
      leer();
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void imprimir() throws ParseException {
    jj_consume_token(PR_IMPRIMIR);
    jj_consume_token(DEL_PARENTESIS_ABRE);
    jj_consume_token(VAL_CADENA);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OP_ADD:{
        ;
        break;
        }
      default:
        break label_3;
      }
      jj_consume_token(OP_ADD);
      nombre();
    }
    jj_consume_token(DEL_PARENTESIS_CIERRA);
    jj_consume_token(DEL_PUNTOYCOMA);
  }

  final public void leer() throws ParseException {
    jj_consume_token(PR_LEER);
    jj_consume_token(DEL_PARENTESIS_ABRE);
    tipo();
    jj_consume_token(DEL_COMA);
    nombre();
    jj_consume_token(DEL_PARENTESIS_CIERRA);
    jj_consume_token(DEL_PUNTOYCOMA);
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(PR_PARA)) return true;
    if (jj_scan_token(DEL_PARENTESIS_ABRE)) return true;
    if (jj_3R_5()) return true;
    if (jj_scan_token(DEL_PUNTOYCOMA)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(DEL_PUNTOYCOMA)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_scan_token(55)) return true;
    if (jj_scan_token(OP_ASIG)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DEL_PUNTOYCOMA)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_3R_11()) return true;
    if (jj_scan_token(55)) return true;
    if (jj_scan_token(OP_ASIG)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(DEL_PUNTOYCOMA)) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(PR_HACER)) return true;
    if (jj_scan_token(DEL_LLAVE_ABRE)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(DEL_LLAVE_CIERRA)) return true;
    if (jj_scan_token(PR_MIENTRAS)) return true;
    if (jj_scan_token(DEL_PARENTESIS_ABRE)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(DEL_PARENTESIS_CIERRA)) return true;
    if (jj_scan_token(DEL_PUNTOYCOMA)) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(OP_ADD)) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(PR_SI)) return true;
    if (jj_scan_token(DEL_PARENTESIS_ABRE)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(DEL_PARENTESIS_CIERRA)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(PR_MIENTRAS)) return true;
    if (jj_scan_token(DEL_PARENTESIS_ABRE)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(DEL_PARENTESIS_CIERRA)) return true;
    if (jj_scan_token(DEL_LLAVE_ABRE)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(DEL_LLAVE_CIERRA)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_scan_token(DEL_PARENTESIS_ABRE)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(DEL_PARENTESIS_CIERRA)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_4()
 {
    if (jj_3R_11()) return true;
    if (jj_scan_token(55)) return true;
    if (jj_scan_token(DEL_PUNTOYCOMA)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(PR_LEER)) return true;
    if (jj_scan_token(DEL_PARENTESIS_ABRE)) return true;
    if (jj_3R_11()) return true;
    if (jj_scan_token(DEL_COMA)) return true;
    if (jj_scan_token(55)) return true;
    if (jj_scan_token(DEL_PARENTESIS_CIERRA)) return true;
    if (jj_scan_token(DEL_PUNTOYCOMA)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_8()) return true;
    if (jj_scan_token(OP_DIV)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_8()) return true;
    if (jj_scan_token(OP_MUL)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(PR_IMPRIMIR)) return true;
    if (jj_scan_token(DEL_PARENTESIS_ABRE)) return true;
    if (jj_scan_token(VAL_CADENA)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DEL_PARENTESIS_CIERRA)) return true;
    if (jj_scan_token(DEL_PUNTOYCOMA)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_6()) return true;
    if (jj_scan_token(OP_SUB)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_6()) return true;
    if (jj_scan_token(OP_ADD)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(55)) return true;
    if (jj_scan_token(OP_DEC)) return true;
    if (jj_scan_token(DEL_PUNTOYCOMA)) return true;
    return false;
  }

  private boolean jj_3R_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(55)) return true;
    if (jj_scan_token(OP_INC)) return true;
    if (jj_scan_token(DEL_PUNTOYCOMA)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(55)) return true;
    if (jj_scan_token(OP_DEC)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(55)) return true;
    if (jj_scan_token(OP_INC)) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(PR_SINO)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_3R_7()) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(PR_SI)) return true;
    if (jj_scan_token(DEL_PARENTESIS_ABRE)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(DEL_PARENTESIS_CIERRA)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(PR_SINO)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ETUTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;

  /** Constructor with InputStream. */
  public ETU(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ETU(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ETUTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor. */
  public ETU(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ETUTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public ETU(ETUTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(ETUTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        }
