/* REG.java */
/* Generated By:JavaCC: Do not edit this line. REG.java */
        //	Clase que implementa el parser
        public class REG implements REGConstants {
                //	Variables de clase
                private static REG compiler;
                private static boolean band = true;

                //	MÃ©todo principal
                public static void main( String[] REGArgs ) throws ParseException
                {
                        //	Si el usuario escribe por consola
                        if ( REGArgs.length == 0 ) {
                                System.out.println( "\u005cnConsola>> Escriba c\u00f3digo...\u005cn\u005ct" );
                                compiler = new REG( System.in );
                                startAnalyser();
                        }

                        //	Si el usuario pasa un archivo para analizar
                        if ( REGArgs.length == 1 ) {
                                System.out.println( "\u005cnConsola>> Leyendo del archivo " + REGArgs[0] + " ...\u005cn\u005ct" );

                                try {
                                        compiler = new REG( new java.io.FileInputStream( REGArgs[0] ) );
                                        startAnalyser();
                                }
                                catch( java.io.FileNotFoundException e ) {
                                        System.out.println( "Consola>> El fichero " + REGArgs[0] + " no ha sido encontrado." );
                                }
                        }
                }

                private static void startAnalyser() throws ParseException {
                        //try{
                                compiler.start();
                                System.out.println( "\u005cnANALISIS SINT\u00c1CTICO TERMINADO." );
                                /*
			}
			catch(ParseException pe){
				System.out.println("Hubo un error sintactico general: \n\t" + pe.getMessage());
				/*
				Token t = getToken(0);
				while(t.image != ";" || t.kind != REGTokenManager.EOF){
					t = getNextToken();
				}


				Token t;
				do {
					t = getNextToken();
				} while ( t.kind != REGTokenManager.EOF || t.image != ";");

			}*/
                }

                public static void showMessage(StringBuilder t, String msj) {

                        if (band) {
                                //System.out.printf("\t%-20s %s\n\n", "LEXEMA", "TOKEN");
                                band = false;
                        }
                        //System.out.printf("\t%-20s %s\n", t, msj);
                }

//	Declaracion gramaticas
  static final public void start() throws ParseException {
    try {
      jj_consume_token(PR_PROGRAMA);
      nombre();
      jj_consume_token(DEL_LLAVE_ABRE);
      instruccion();
      jj_consume_token(DEL_LLAVE_CIERRA);
      jj_consume_token(0);
    } catch (ParseException pe) {
System.out.println("\u005ct} o ;  \u005cn");
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind != REGTokenManager.EOF);
    }
  }

  static final public void nombre() throws ParseException {
    jj_consume_token(OP_PESO);
    jj_consume_token(ID);
  }

  static final public void instruccion() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PR_IF:
      case PR_FOR:
      case PR_WHILE:
      case PR_PRINTLN:
      case PR_READLN:
      case PR_DO:
      case OP_PESO:
      case T_STRING:
      case T_INT:
      case T_FLOAT:
      case T_BOOLEAN:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_STRING:
      case T_INT:
      case T_FLOAT:
      case T_BOOLEAN:{
        declaracion();
        break;
        }
      case PR_IF:{
        condicional();
        break;
        }
      case PR_FOR:
      case PR_WHILE:
      case PR_DO:{
        ciclo();
        break;
        }
      case PR_PRINTLN:
      case PR_READLN:{
        io();
        break;
        }
      case OP_PESO:{
        actualizacion2();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void declaracion() throws ParseException {
    try {
      if (jj_2_1(5)) {
        declaracion_ni();
      } else if (jj_2_2(5)) {
        declaracion_i();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico declaracion: \u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != ")" || t.image != ";" || t.image != "}");
    }
  }

  static final public void declaracion_ni() throws ParseException {
    try {
      tipo();
      nombre();
      jj_consume_token(DEL_PUNTO_COMA);
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico declaracion no inicializada: \u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != ")" || t.image != ";" || t.image != "}");
    }
  }

  static final public void declaracion_i() throws ParseException {
    try {
      tipo();
      nombre();
      jj_consume_token(OP_ASIG);
      valor();
      jj_consume_token(DEL_PUNTO_COMA);
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico declaracion inicializada: \u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != ")" || t.image != ";" || t.image != "}");
    }
  }

  static final public void tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_STRING:{
      jj_consume_token(T_STRING);
      break;
      }
    case T_INT:{
      jj_consume_token(T_INT);
      break;
      }
    case T_BOOLEAN:{
      jj_consume_token(T_BOOLEAN);
      break;
      }
    case T_FLOAT:{
      jj_consume_token(T_FLOAT);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void valor() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAL_STRING:{
        jj_consume_token(VAL_STRING);
        break;
        }
      case VAL_BOOLEAN:{
        jj_consume_token(VAL_BOOLEAN);
        break;
        }
      case DEL_PARENTESIS_ABRE:
      case OP_PESO:
      case VAL_INT:
      case VAL_FLOAT:{
        expresion();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico valor invalido: \u005cnDetalles:\u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != ")" || t.image != ";" || t.image != "}");
    }
  }

  static final public void expresion() throws ParseException {
    if (jj_2_3(3)) {
      termino();
      jj_consume_token(OP_ADD);
      expresion();
    } else if (jj_2_4(3)) {
      termino();
      jj_consume_token(OP_SUB);
      expresion();
    } else if (jj_2_5(3)) {
      termino();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void termino() throws ParseException {
    if (jj_2_6(3)) {
      factor();
      jj_consume_token(OP_MUL);
      termino();
    } else if (jj_2_7(3)) {
      factor();
      jj_consume_token(OP_DIV);
      termino();
    } else if (jj_2_8(3)) {
      factor();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void factor() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEL_PARENTESIS_ABRE:{
        jj_consume_token(DEL_PARENTESIS_ABRE);
        expresion();
        jj_consume_token(DEL_PARENTESIS_CIERRA);
        break;
        }
      case OP_PESO:{
        nombre();
        break;
        }
      case VAL_INT:{
        jj_consume_token(VAL_INT);
        break;
        }
      case VAL_FLOAT:{
        jj_consume_token(VAL_FLOAT);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico en la expresion aritmetica: \u005cnDetalles:\u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != ")" || t.image != ";" || t.image != "}");
    }
  }

  static final public void condicional() throws ParseException {
    try {
      if (jj_2_9(11)) {
        pif();
      } else if (jj_2_10(11)) {
        pif_else();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico en sentencias condicionales: \u005cnDetalles:\u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != "}");
    }
  }

  static final public void pif() throws ParseException {
    try {
      jj_consume_token(PR_IF);
      jj_consume_token(DEL_GATO);
      condicion();
      jj_consume_token(DEL_GATO);
      jj_consume_token(DEL_LLAVE_ABRE);
      instruccion();
      jj_consume_token(DEL_LLAVE_CIERRA);
    } catch (ParseException pe) {
System.out.println("Hubo un error sintactico sentencia if: \u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while ( t.image != "}");
                condicional();
    }
  }

  static final public void pif_else() throws ParseException {
    try {
      jj_consume_token(PR_IF);
      jj_consume_token(DEL_PARENTESIS_ABRE);
      condicion();
      jj_consume_token(DEL_PARENTESIS_CIERRA);
      jj_consume_token(DEL_LLAVE_ABRE);
      instruccion();
      jj_consume_token(DEL_LLAVE_CIERRA);
      jj_consume_token(PR_ELSE);
      jj_consume_token(DEL_LLAVE_ABRE);
      instruccion();
      jj_consume_token(DEL_LLAVE_CIERRA);
    } catch (ParseException pe) {
System.out.println("Hubo un error sintactico sentencia if-else: \u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while ( t.image != "}");
                condicional();
    }
  }

  static final public void condicion() throws ParseException {
    try {
      expresion();
      op_log();
      expresion();
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico en condicion: \u005cnDetalles:\u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != ")");
    }
  }

  static final public void op_log() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OP_MENOR:{
      jj_consume_token(OP_MENOR);
      break;
      }
    case OP_MENOR_IGUAL:{
      jj_consume_token(OP_MENOR_IGUAL);
      break;
      }
    case OP_MAYOR_IGUAL:{
      jj_consume_token(OP_MAYOR_IGUAL);
      break;
      }
    case OP_MAYOR:{
      jj_consume_token(OP_MAYOR);
      break;
      }
    case OP_IGUAL:{
      jj_consume_token(OP_IGUAL);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ciclo() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PR_WHILE:{
        pwhile();
        break;
        }
      case PR_DO:{
        pdo_while();
        break;
        }
      case PR_FOR:{
        pfor();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico en ciclos: \u005cnDetalles:\u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != "}" || t.image != ";");
    }
  }

  static final public void pwhile() throws ParseException {
    try {
      jj_consume_token(PR_WHILE);
      jj_consume_token(DEL_PARENTESIS_ABRE);
      condicion();
      jj_consume_token(DEL_PARENTESIS_CIERRA);
      jj_consume_token(DEL_LLAVE_ABRE);
      instruccion();
      jj_consume_token(DEL_LLAVE_CIERRA);
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sintactico en while: \u005cnDetalles:\u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != "}");
    }
  }

  static final public void pdo_while() throws ParseException {
    try {
      jj_consume_token(PR_DO);
      jj_consume_token(DEL_QUE);
      instruccion();
      jj_consume_token(DEL_QUEE);
      jj_consume_token(PR_WHILE);
      jj_consume_token(DEL_PARENTESIS_ABRE);
      condicion();
      jj_consume_token(DEL_PARENTESIS_CIERRA);
      jj_consume_token(DEL_PUNTO_COMA);
    } catch (ParseException pe) {
System.out.println("\u005cnHubo un error sint\u00e1ctico en do-while: \u005cnDetalles:\u005cn\u005ct" + pe.getMessage());
                Token t;
                do {
                        t = getNextToken();
                } while (t.image != ";");
    }
  }

  static final public void pfor() throws ParseException {
    jj_consume_token(PR_FOR);
    jj_consume_token(DEL_PARENTESIS_ABRE);
    declaracion_i();
    jj_consume_token(DEL_PUNTO_COMA);
    condicion();
    jj_consume_token(DEL_PUNTO_COMA);
    actualizacion();
    jj_consume_token(DEL_PARENTESIS_CIERRA);
    jj_consume_token(DEL_LLAVE_ABRE);
    instruccion();
    jj_consume_token(DEL_LLAVE_CIERRA);
  }

  static final public void actualizacion() throws ParseException {
    if (jj_2_11(2)) {
      nombre();
      jj_consume_token(OP_INC);
    } else if (jj_2_12(2)) {
      nombre();
      jj_consume_token(OP_DEC);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void actualizacion2() throws ParseException {
    if (jj_2_13(3)) {
      nombre();
      jj_consume_token(OP_INC);
      jj_consume_token(DEL_PUNTO_COMA);
    } else if (jj_2_14(3)) {
      nombre();
      jj_consume_token(OP_DEC);
      jj_consume_token(DEL_PUNTO_COMA);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void io() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PR_PRINTLN:{
      imprimir();
      break;
      }
    case PR_READLN:{
      leer();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void imprimir() throws ParseException {
    if (jj_2_15(7)) {
      jj_consume_token(PR_PRINTLN);
      jj_consume_token(DEL_PARENTESIS_ABRE);
      jj_consume_token(VAL_STRING);
      jj_consume_token(OP_ADD);
      nombre();
      jj_consume_token(DEL_PARENTESIS_CIERRA);
      jj_consume_token(DEL_PUNTO_COMA);
    } else if (jj_2_16(7)) {
      jj_consume_token(PR_PRINTLN);
      jj_consume_token(DEL_PARENTESIS_ABRE);
      jj_consume_token(VAL_STRING);
      jj_consume_token(DEL_PARENTESIS_CIERRA);
      jj_consume_token(DEL_PUNTO_COMA);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void leer() throws ParseException {
    jj_consume_token(PR_READLN);
    jj_consume_token(DEL_PARENTESIS_ABRE);
    tipo();
    jj_consume_token(DEL_COMA);
    nombre();
    jj_consume_token(DEL_PARENTESIS_CIERRA);
    jj_consume_token(DEL_PUNTO_COMA);
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_35()
 {
    if (jj_scan_token(PR_DO)) return true;
    if (jj_scan_token(DEL_QUE)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(DEL_QUEE)) return true;
    if (jj_scan_token(PR_WHILE)) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_7()
 {
    if (jj_scan_token(PR_IF)) return true;
    if (jj_scan_token(DEL_GATO)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(DEL_GATO)) return true;
    if (jj_scan_token(DEL_LLAVE_ABRE)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(DEL_LLAVE_CIERRA)) return true;
    return false;
  }

  static private boolean jj_3R_3()
 {
    if (jj_3R_10()) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(OP_ASIG)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_31()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_30()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_34()
 {
    if (jj_scan_token(PR_WHILE)) return true;
    if (jj_scan_token(DEL_PARENTESIS_ABRE)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_29()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_13()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_12()
 {
    if (jj_scan_token(DEL_PARENTESIS_ABRE)) return true;
    if (jj_3R_5()) return true;
    if (jj_scan_token(DEL_PARENTESIS_CIERRA)) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3R_2()
 {
    if (jj_3R_10()) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(DEL_PUNTO_COMA)) return true;
    return false;
  }

  static private boolean jj_3_16()
 {
    if (jj_scan_token(PR_PRINTLN)) return true;
    if (jj_scan_token(DEL_PARENTESIS_ABRE)) return true;
    if (jj_scan_token(VAL_STRING)) return true;
    if (jj_scan_token(DEL_PARENTESIS_CIERRA)) return true;
    if (jj_scan_token(DEL_PUNTO_COMA)) return true;
    return false;
  }

  static private boolean jj_3_15()
 {
    if (jj_scan_token(PR_PRINTLN)) return true;
    if (jj_scan_token(DEL_PARENTESIS_ABRE)) return true;
    if (jj_scan_token(VAL_STRING)) return true;
    if (jj_scan_token(OP_ADD)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(DEL_PARENTESIS_CIERRA)) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_3R_6()) return true;
    if (jj_scan_token(OP_DIV)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_38()
 {
    if (jj_scan_token(PR_READLN)) return true;
    if (jj_scan_token(DEL_PARENTESIS_ABRE)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(DEL_COMA)) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_6()) return true;
    if (jj_scan_token(OP_MUL)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_33()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_32()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  static private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    return false;
  }

  static private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_4()) return true;
    if (jj_scan_token(OP_SUB)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_4()) return true;
    if (jj_scan_token(OP_ADD)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_14()
 {
    if (jj_3R_9()) return true;
    if (jj_scan_token(OP_DEC)) return true;
    if (jj_scan_token(DEL_PUNTO_COMA)) return true;
    return false;
  }

  static private boolean jj_3_13()
 {
    if (jj_3R_9()) return true;
    if (jj_scan_token(OP_INC)) return true;
    if (jj_scan_token(DEL_PUNTO_COMA)) return true;
    return false;
  }

  static private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  static private boolean jj_3R_15()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_12()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    return false;
  }

  static private boolean jj_3R_9()
 {
    if (jj_scan_token(OP_PESO)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_14()
 {
    if (jj_3R_5()) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_36()
 {
    if (jj_scan_token(PR_FOR)) return true;
    if (jj_scan_token(DEL_PARENTESIS_ABRE)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3R_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_8()
 {
    if (jj_scan_token(PR_IF)) return true;
    if (jj_scan_token(DEL_PARENTESIS_ABRE)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(DEL_PARENTESIS_CIERRA)) return true;
    if (jj_scan_token(DEL_LLAVE_ABRE)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(DEL_LLAVE_CIERRA)) return true;
    if (jj_scan_token(PR_ELSE)) return true;
    if (jj_scan_token(DEL_LLAVE_ABRE)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(DEL_LLAVE_CIERRA)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public REGTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3b800,0x3b800,0x0,0x2000000,0x2000000,0x0,0x23000,0x18000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x780040,0x780040,0x780000,0x7800040,0x3000040,0x1f00,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[16];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public REG(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public REG(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new REGTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public REG(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new REGTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public REG(REGTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(REGTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 16; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }
