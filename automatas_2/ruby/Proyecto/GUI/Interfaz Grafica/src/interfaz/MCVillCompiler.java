/* MCVillCompiler.java */
/* Generated By:JavaCC: Do not edit this line. MCVillCompiler.java */
        package interfaz;

        //Librerias
        import java.io.IOException;
        import java.util.ArrayList;

        //Clase que ejecuta el parser
        public class MCVillCompiler implements MCVillCompilerConstants {

                private static FileManager file = new FileManager();
                private static FileManager file2 = new FileManager();
                private static FileManager file3 = new FileManager();
                private static IOManager iom = new IOManager(file, file2, file3);;
                private static SemanticManager sm = new SemanticManager();;
                private static ArrayList<Token> listValues = new ArrayList<Token>();
                private static boolean band = true;

                public static void main( String[] MCVillArgs ) {

                        //Declaracion del analizador lÃ©xico
                        MCVillCompiler lex;


                        //Si el usuario escribe en la consola
                        if ( MCVillArgs.length == 0 ) {
                                System.out.println( "MCVill:> Leyendo de entrada estandar...\u005cn" );
                                lex = new MCVillCompiler( System.in );
                        }

                        //Si el usuario le pasa un archivo para analizar
                        else if ( MCVillArgs.length == 1 ) {
                                System.out.println( "MCVill:> Leyendo de fichero " + MCVillArgs[0] + " ...\u005cn" );

                                try {
                                        lex = new MCVillCompiler( new java.io.FileInputStream( MCVillArgs[0] ) );
                                } catch( java.io.FileNotFoundException e ) {
                                        System.out.println( "MCVill:> El fichero " + MCVillArgs[0] + " no ha sido encontrado." );
                                        return;
                                }
                        }

                        //Si el usuario no sabe usarlo
                        else {
                                System.out.println ("MCVill:> Debes utilizarlo de una de las siguientes formas:");
                                System.out.println ("         java MCVill < fichero");
                                System.out.println ("Or");
                                System.out.println ("         java MCVill fichero");
                                return;
                        }

                        //Ejecucion del Analizador
                        try{
                                file.crearFile("out\u005c\u005cMCVill_lexical_Output.txt");
                                file2.crearFile("out\u005c\u005cMCVill_Syntax_Output.txt");
                                file3.crearFile("out\u005c\u005cMCVill_Semantic_Output.txt");
                                lex.start();
                                System.out.println( "\u005cnMCVill:> La entrada ha sido leida con exito.");
                                file.cerrarFile();
                                file2.cerrarFile();
                                file3.cerrarFile();
                        }

                        catch(TokenMgrError e){
                                System.out.println( "\u005cnMCVill:> Ha ocurrido un error lexico.");
                                System.out.println( "Detalles: " + e.getMessage());
                        }
                        catch(ParseException pe){
                                iom.errorSyntax(pe);
                        }
                }

//GRAMATICAS
  static final public void start() throws ParseException {
    program();
  }

//************************************* PROGRAMA *************************************************
  static final public void program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PR_CLASS:
      case PR_DEF:
      case PR_FALSE:
      case PR_TRUE:
      case PR_FOR:
      case PR_IF:
      case PR_UNLESS:
      case PR_UNTIL:
      case PR_WHILE:
      case PR_PRINT:
      case PR_PRINTF:
      case PR_PUTS:
      case PR_P:
      case VAL_CADENA:
      case VAL_CADENA2:
      case VAL_ENTERO:
      case VAL_DECIMAL:
      case ID_LOCAL:
      case ID_INSTANCE:
      case ID_CLASS:
      case ID_GLOBAL:
      case ID_CONSTANT:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      if (jj_2_1(5)) {
        stmt();
      } else if (jj_2_2(5)) {
        func();
      } else if (jj_2_3(5)) {
        estructuras();
      } else if (jj_2_4(5)) {
        clases();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PR_FALSE:
        case PR_TRUE:
        case VAL_CADENA:
        case VAL_CADENA2:
        case VAL_ENTERO:
        case VAL_DECIMAL:
        case ID_LOCAL:
        case ID_INSTANCE:
        case ID_CLASS:
        case ID_GLOBAL:
        case ID_CONSTANT:{
          opr();
          jj_consume_token(S_SALTO);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

//********************************* EXPRESIONES GENERALES *****************************************
  static final public void opr() throws ParseException {
    try {
      if (jj_2_5(13)) {
        varname();
        op_arit();
        varname();
      } else if (jj_2_6(3)) {
        valores();
        op_arit();
        valores();
      } else if (jj_2_7(13)) {
        varname();
        op_arit();
        valores();
      } else if (jj_2_8(2)) {
        valores();
        op_arit();
        varname();
      } else if (jj_2_9(10)) {
        varname();
        op_asigna();
        varname();
      } else if (jj_2_10(10)) {
        varname();
        op_asigna();
        valores();
      } else if (jj_2_11(13)) {
        varname();
        op_logicos();
        varname();
      } else if (jj_2_12(3)) {
        valores();
        op_logicos();
        valores();
      } else if (jj_2_13(13)) {
        varname();
        op_logicos();
        valores();
      } else if (jj_2_14(2)) {
        valores();
        op_logicos();
        varname();
      } else if (jj_2_15(13)) {
        varname();
        op_compara();
        varname();
      } else if (jj_2_16(3)) {
        valores();
        op_compara();
        valores();
      } else if (jj_2_17(13)) {
        varname();
        op_compara();
        valores();
      } else if (jj_2_18(2)) {
        valores();
        op_compara();
        varname();
      } else if (jj_2_19(13)) {
        varname();
        op_rango();
        varname();
      } else if (jj_2_20(3)) {
        valores();
        op_rango();
        valores();
      } else if (jj_2_21(13)) {
        varname();
        op_rango();
        valores();
      } else if (jj_2_22(3)) {
        valores();
        op_rango();
        varname();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
    }
  }

//************************************* STMT  *************************************************
  static final public void stmt() throws ParseException {
    if (jj_2_23(5)) {
      declara();
    } else if (jj_2_24(5)) {
      imprimir();
    } else if (jj_2_25(5)) {
      accArregos();
    } else if (jj_2_26(5)) {
      parsear();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID_LOCAL:
      case ID_INSTANCE:
      case ID_CLASS:
      case ID_GLOBAL:
      case ID_CONSTANT:{
        llamadaMetodos();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//************************************* DECLARACIONES ***************************************
  static final public void declara() throws ParseException {Token id;
        String type = null;
        int line = 0;
    try {
      id = varname();
      jj_consume_token(OAS_ASIGNA);
      if (jj_2_27(5)) {
        rangos();
        jj_consume_token(S_SALTO);
      } else if (jj_2_28(5)) {
        arreglos();
        jj_consume_token(S_SALTO);
      } else if (jj_2_29(5)) {
        lectura();
        jj_consume_token(S_SALTO);
      } else if (jj_2_30(5)) {
        parsear();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_PAREN_A:
        case VAL_CADENA:
        case VAL_CADENA2:
        case VAL_ENTERO:
        case VAL_DECIMAL:
        case ID_LOCAL:{
          valor();
          jj_consume_token(S_SALTO);
for( int i = 0; i < listValues.size(); i++ )
                                                                                          {
                                                                                                for (int j = 0; j < listValues.size(); j++ )
                                                                                                {
                                                                                                        type = sm.compareTypes( listValues.get( i ), listValues.get( j ) );
                                                                                                }
                                                                                          }
                                                                                          sm.addVariable( id, type );
                                                                                          listValues.clear();
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
listValues.clear();
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while ( t.kind != MCVillCompilerTokenManager.EOF);
    } catch (SemanticException se) {
iom.errorSemantic(se);
                Token t;
                do {
                        t = getNextToken();
                } while ( t.kind != MCVillCompilerTokenManager.EOF );
    }
  }

//************************************** VALORES ********************************************
  static final public void valor() throws ParseException, SemanticException {
    expr();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_SUMA:
      case S_MULTIPLICA:
      case OA_RESTA:
      case OA_DIVICION:
      case OA_POTENCIA:
      case OA_MOD_DIV:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      op_arit();
      expr();
    }
  }

//**************************************** EXPRESIONES ***************************************
  static final public 
void expr() throws ParseException {Token id;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID_LOCAL:{
        id = jj_consume_token(ID_LOCAL);
sm.checkVariable( id );
                                                                                          listValues.add( id );
        break;
        }
      case VAL_ENTERO:{
        id = jj_consume_token(VAL_ENTERO);
listValues.add( id );
        break;
        }
      case VAL_CADENA:{
        id = jj_consume_token(VAL_CADENA);
listValues.add( id );
        break;
        }
      case VAL_DECIMAL:{
        id = jj_consume_token(VAL_DECIMAL);
listValues.add( id );
        break;
        }
      case VAL_CADENA2:{
        id = jj_consume_token(VAL_CADENA2);
listValues.add( id );
        break;
        }
      case S_PAREN_A:{
        jj_consume_token(S_PAREN_A);
        valor();
        jj_consume_token(S_PAREN_C);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
iom.errorSyntax(e);
    } catch (SemanticException se) {
iom.errorSemantic(se);
    }
  }

//**************************************** OPERADORES  **************************************
  static final public void op_arit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OA_RESTA:{
      jj_consume_token(OA_RESTA);
      break;
      }
    case S_SUMA:{
      jj_consume_token(S_SUMA);
      break;
      }
    case S_MULTIPLICA:{
      jj_consume_token(S_MULTIPLICA);
      break;
      }
    case OA_DIVICION:{
      jj_consume_token(OA_DIVICION);
      break;
      }
    case OA_MOD_DIV:{
      jj_consume_token(OA_MOD_DIV);
      break;
      }
    case OA_POTENCIA:{
      jj_consume_token(OA_POTENCIA);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void op_logicos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OL_AND:{
      jj_consume_token(OL_AND);
      break;
      }
    case OL_OR:{
      jj_consume_token(OL_OR);
      break;
      }
    case OL_NOT:{
      jj_consume_token(OL_NOT);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void op_rango() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ORA_RANGO:{
      jj_consume_token(ORA_RANGO);
      break;
      }
    case ORA_RANGO1:{
      jj_consume_token(ORA_RANGO1);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void op_compara() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OC_IGUAL_QUE:{
      jj_consume_token(OC_IGUAL_QUE);
      break;
      }
    case OC_DIFERENTE_DE:{
      jj_consume_token(OC_DIFERENTE_DE);
      break;
      }
    case OC_MENOR_QUE:{
      jj_consume_token(OC_MENOR_QUE);
      break;
      }
    case OC_MAYOR_QUE:{
      jj_consume_token(OC_MAYOR_QUE);
      break;
      }
    case OC_MAYOR_O_IGUAL:{
      jj_consume_token(OC_MAYOR_O_IGUAL);
      break;
      }
    case OC_MENOR_O_IGUAL:{
      jj_consume_token(OC_MENOR_O_IGUAL);
      break;
      }
    case OC_COMBINADO:{
      jj_consume_token(OC_COMBINADO);
      break;
      }
    case OC_QUESTION:{
      jj_consume_token(OC_QUESTION);
      break;
      }
    case OC_IGUALDAD_WHEN:{
      jj_consume_token(OC_IGUALDAD_WHEN);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void op_asigna() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OAS_SUMA_ASIGNA:{
      jj_consume_token(OAS_SUMA_ASIGNA);
      break;
      }
    case OAS_RESTA_ASIGNA:{
      jj_consume_token(OAS_RESTA_ASIGNA);
      break;
      }
    case OAS_MULTIPLICACION_ASIGNA:{
      jj_consume_token(OAS_MULTIPLICACION_ASIGNA);
      break;
      }
    case OAS_DIVICION_ASIGNA:{
      jj_consume_token(OAS_DIVICION_ASIGNA);
      break;
      }
    case OC_POTENCIA_ASIGNA:{
      jj_consume_token(OC_POTENCIA_ASIGNA);
      break;
      }
    case OC_MODULO_ASIGNA:{
      jj_consume_token(OC_MODULO_ASIGNA);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//**************************************** VARIABLES ****************************************
  static final public Token varname() throws ParseException {Token id;
    if (jj_2_31(5)) {
      id = jj_consume_token(ID_LOCAL);
    } else if (jj_2_32(5)) {
      id = jj_consume_token(ID_CONSTANT);
    } else if (jj_2_33(5)) {
      id = jj_consume_token(ID_GLOBAL);
    } else if (jj_2_34(5)) {
      id = jj_consume_token(ID_CLASS);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID_INSTANCE:{
        id = jj_consume_token(ID_INSTANCE);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return id;}
    throw new Error("Missing return statement in function");
  }

//************************************** VALORES ********************************************
  static final public void valores() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAL_ENTERO:{
      jj_consume_token(VAL_ENTERO);
      break;
      }
    case VAL_DECIMAL:{
      jj_consume_token(VAL_DECIMAL);
      break;
      }
    case VAL_CADENA:{
      jj_consume_token(VAL_CADENA);
      break;
      }
    case VAL_CADENA2:{
      jj_consume_token(VAL_CADENA2);
      break;
      }
    case ID_LOCAL:{
      jj_consume_token(ID_LOCAL);
      break;
      }
    case PR_TRUE:{
      jj_consume_token(PR_TRUE);
      break;
      }
    case PR_FALSE:{
      jj_consume_token(PR_FALSE);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//**************************************** CONTENIDO RANGOS *********************************
  static final public void rangos() throws ParseException {
    try {
      if (jj_2_35(3)) {
        varname();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ORA_RANGO1:{
          jj_consume_token(ORA_RANGO1);
          break;
          }
        case ORA_RANGO:{
          jj_consume_token(ORA_RANGO);
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        varname();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PR_FALSE:
        case PR_TRUE:
        case VAL_CADENA:
        case VAL_CADENA2:
        case VAL_ENTERO:
        case VAL_DECIMAL:
        case ID_LOCAL:{
          valores();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ORA_RANGO1:{
            jj_consume_token(ORA_RANGO1);
            break;
            }
          case ORA_RANGO:{
            jj_consume_token(ORA_RANGO);
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          valores();
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
                declara();
    }
  }

//************************************ CONTENIDO ARREGLOS ***********************************
  static final public void arreglos() throws ParseException {
    try {
      jj_consume_token(S_CORCHETE_A);
      valores();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_COMA:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_3;
        }
        jj_consume_token(S_COMA);
        valores();
      }
      jj_consume_token(S_CORCHETE_C);
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
    }
  }

//********************************* CONTENIDO LECTURAS **************************************
//("." (<PR_CHOMP> | "."( <PR_TO_I> |  <PR_TO_F>|  <PR_TO_S>)))*
  static final public void lectura() throws ParseException {
    try {
      varname();
      jj_consume_token(S_PUNTO);
      jj_consume_token(PR_GETS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_PUNTO:{
        if (jj_2_36(5)) {
          jj_consume_token(S_PUNTO);
          jj_consume_token(PR_CHOMP);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S_PUNTO:{
            jj_consume_token(S_PUNTO);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case PR_TO_I:{
              jj_consume_token(PR_TO_I);
              break;
              }
            case PR_TO_F:{
              jj_consume_token(PR_TO_F);
              break;
              }
            default:
              jj_la1[17] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            ;
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S_PUNTO:{
            jj_consume_token(S_PUNTO);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case PR_TO_I:{
              jj_consume_token(PR_TO_I);
              break;
              }
            case PR_TO_F:{
              jj_consume_token(PR_TO_F);
              break;
              }
            default:
              jj_la1[19] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
    }
  }

//**************************************** PARSEO DE VARIABLES ***********************************************
  static final public void parsear() throws ParseException {
    try {
      varname();
      jj_consume_token(S_PUNTO);
      puntosPalabras();
      jj_consume_token(S_SALTO);
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
        stmt();
    }
  }

//**************************************** PUNTOS + PALABRAS RESERVADAS ***************************************
  static final public void puntosPalabras() throws ParseException {
    try {
      if (jj_2_39(8)) {
        jj_consume_token(PR_CLASS);
      } else if (jj_2_40(8)) {
        jj_consume_token(PR_TO_S);
      } else if (jj_2_41(8)) {
        jj_consume_token(PR_TO_F);
      } else if (jj_2_42(8)) {
        jj_consume_token(PR_TO_I);
      } else if (jj_2_43(8)) {
        jj_consume_token(PR_NEW);
      } else if (jj_2_44(8)) {
        jj_consume_token(PR_EACH);
        jj_consume_token(PR_DO);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PR_EMPTY:
        case PR_UPCASE:
        case PR_INCLUDE:{
          if (jj_2_37(3)) {
            jj_consume_token(PR_EMPTY);
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case PR_INCLUDE:{
              jj_consume_token(PR_INCLUDE);
              break;
              }
            case PR_UPCASE:{
              jj_consume_token(PR_UPCASE);
              break;
              }
            default:
              jj_la1[22] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          if (jj_2_38(2)) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case OC_QUESTION:{
              jj_consume_token(OC_QUESTION);
              break;
              }
            case OL_NOT:{
              jj_consume_token(OL_NOT);
              break;
              }
            default:
              jj_la1[23] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else {
            ;
          }
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
        parsear();
    }
  }

//********************************** IMPRESIONES -PUTS -PRINT -P ********************************************
  static final public void imprimir() throws ParseException {
    try {
      if (jj_2_45(4)) {
        jj_consume_token(PR_PUTS);
      } else if (jj_2_46(4)) {
        jj_consume_token(PR_PRINT);
      } else if (jj_2_47(4)) {
        jj_consume_token(PR_PRINTF);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PR_P:{
          jj_consume_token(PR_P);
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_48(2)) {
        valores();
        jj_consume_token(S_SALTO);
      } else if (jj_2_49(2)) {
        varname();
        jj_consume_token(S_SALTO);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID_LOCAL:
        case ID_INSTANCE:
        case ID_CLASS:
        case ID_GLOBAL:
        case ID_CONSTANT:{
          parsear();
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
        stmt();
    }
  }

//************************************ ACCESO ARREGLOS ****************************************************
  static final public 
void accArregos() throws ParseException {
    try {
      varname();
      jj_consume_token(S_CORCHETE_A);
      if (jj_2_50(2)) {
        varname();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PR_FALSE:
        case PR_TRUE:
        case VAL_CADENA:
        case VAL_CADENA2:
        case VAL_ENTERO:
        case VAL_DECIMAL:
        case ID_LOCAL:{
          valores();
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(S_CORCHETE_C);
      jj_consume_token(S_SALTO);
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
        stmt();
    }
  }

//********************************* LLAMADA A METODOS ***************************************************
  static final public void llamadaMetodos() throws ParseException {
    try {
      varname();
      jj_consume_token(S_PAREN_A);
      if (jj_2_51(2)) {
        varname();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PR_FALSE:
        case PR_TRUE:
        case VAL_CADENA:
        case VAL_CADENA2:
        case VAL_ENTERO:
        case VAL_DECIMAL:
        case ID_LOCAL:{
          valores();
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_COMA:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_4;
        }
        jj_consume_token(S_COMA);
        if (jj_2_52(2)) {
          varname();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PR_FALSE:
          case PR_TRUE:
          case VAL_CADENA:
          case VAL_CADENA2:
          case VAL_ENTERO:
          case VAL_DECIMAL:
          case ID_LOCAL:{
            valores();
            break;
            }
          default:
            jj_la1[30] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(S_PAREN_C);
      jj_consume_token(S_SALTO);
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
        stmt();
    }
  }

//********************************* FUNCIONES *********************************************************
  static final public 
void func() throws ParseException {
    try {
      metodos();
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
                func();
    }
  }

//********************************* METODOS **********************************************************
  static final public 
void metodos() throws ParseException {
    try {
      jj_consume_token(PR_DEF);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PR_SELF:{
        jj_consume_token(PR_SELF);
        jj_consume_token(S_PUNTO);
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      varname();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_PAREN_A:
      case ID_LOCAL:
      case ID_INSTANCE:
      case ID_CLASS:
      case ID_GLOBAL:
      case ID_CONSTANT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_PAREN_A:{
          jj_consume_token(S_PAREN_A);
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          ;
        }
        varname();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S_COMA:{
            ;
            break;
            }
          default:
            jj_la1[33] = jj_gen;
            break label_5;
          }
          jj_consume_token(S_COMA);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ID_LOCAL:
          case ID_INSTANCE:
          case ID_CLASS:
          case ID_GLOBAL:
          case ID_CONSTANT:{
            varname();
            break;
            }
          case S_MULTIPLICA:{
            jj_consume_token(S_MULTIPLICA);
            jj_consume_token(ID_LOCAL);
            break;
            }
          case OA_POTENCIA:{
            jj_consume_token(OA_POTENCIA);
            jj_consume_token(ID_LOCAL);
            break;
            }
          default:
            jj_la1[34] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_PAREN_C:{
          jj_consume_token(S_PAREN_C);
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(S_SALTO);
      program();
      jj_consume_token(PR_END);
      jj_consume_token(S_SALTO);
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
        func();
    }
  }

//********************************* ESTRUCTURAS *******************************************
  static final public void estructuras() throws ParseException {
    try {
      if (jj_2_53(5)) {
        esIf();
      } else if (jj_2_54(5)) {
        esUnless();
      } else if (jj_2_55(5)) {
        esWhile();
      } else if (jj_2_56(5)) {
        esUntil();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PR_FOR:{
          esFor();
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
                program();
    }
  }

//********************************* IF *******************************************
  static final public void esIf() throws ParseException {
    try {
      jj_consume_token(PR_IF);
      varname();
      op_compara();
      if (jj_2_57(2)) {
        varname();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PR_FALSE:
        case PR_TRUE:
        case VAL_CADENA:
        case VAL_CADENA2:
        case VAL_ENTERO:
        case VAL_DECIMAL:
        case ID_LOCAL:{
          valores();
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(S_SALTO);
      program();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PR_ELSIF:{
        esElsif();
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      jj_consume_token(PR_END);
      jj_consume_token(S_SALTO);
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF & t.image != "\u005cn");
                estructuras();
    }
  }

//****************************************** ELSIF ********************************************************
  static final public void esElsif() throws ParseException {
    try {
      jj_consume_token(PR_ELSIF);
      varname();
      op_compara();
      if (jj_2_58(2)) {
        varname();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PR_FALSE:
        case PR_TRUE:
        case VAL_CADENA:
        case VAL_CADENA2:
        case VAL_ENTERO:
        case VAL_DECIMAL:
        case ID_LOCAL:{
          valores();
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(S_SALTO);
      program();
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
    }
  }

//****************************************** UNLESS ********************************************************
  static final public void esUnless() throws ParseException {
    try {
      jj_consume_token(PR_UNLESS);
      varname();
      op_compara();
      if (jj_2_59(2)) {
        varname();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PR_FALSE:
        case PR_TRUE:
        case VAL_CADENA:
        case VAL_CADENA2:
        case VAL_ENTERO:
        case VAL_DECIMAL:
        case ID_LOCAL:{
          valores();
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(S_SALTO);
      program();
      jj_consume_token(PR_END);
      jj_consume_token(S_SALTO);
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
        estructuras();
    }
  }

//****************************************** WHILE ********************************************************
  static final public void esWhile() throws ParseException {
    try {
      jj_consume_token(PR_WHILE);
      opr();
      jj_consume_token(S_SALTO);
      program();
      jj_consume_token(PR_END);
      jj_consume_token(S_SALTO);
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
        estructuras();
    }
  }

//****************************************** UNTIL  ********************************************************
  static final public void esUntil() throws ParseException {
    try {
      jj_consume_token(PR_UNTIL);
      opr();
      jj_consume_token(S_SALTO);
      program();
      jj_consume_token(PR_END);
      jj_consume_token(S_SALTO);
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
        estructuras();
    }
  }

//****************************************** FOR  **********************************************************
  static final public void esFor() throws ParseException {
    try {
      jj_consume_token(PR_FOR);
      opr();
      jj_consume_token(S_SALTO);
      program();
      jj_consume_token(PR_END);
      jj_consume_token(S_SALTO);
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
        estructuras();
    }
  }

//********************************* CLASES *****************************************************************
  static final public 
void clases() throws ParseException {
    try {
      jj_consume_token(PR_CLASS);
      varname();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OC_MENOR_QUE:{
        jj_consume_token(OC_MENOR_QUE);
        varname();
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      jj_consume_token(S_SALTO);
      program();
      jj_consume_token(PR_END);
      jj_consume_token(S_SALTO);
    } catch (ParseException e) {
iom.errorSyntax(e);
                Token t;
                do {
                        t = getNextToken();
                } while (t.kind == MCVillCompilerTokenManager.EOF);
        clases();
    }
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_3R_44()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(S_PAREN_A)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_53()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(S_PAREN_C)) return true;
    if (jj_scan_token(S_SALTO)) return true;
    return false;
  }

  static private boolean jj_3R_47()
 {
    if (jj_scan_token(PR_FOR)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(S_SALTO)) return true;
    return false;
  }

  static private boolean jj_3R_42()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_56()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_46()
 {
    if (jj_scan_token(PR_PRINT)) return true;
    return false;
  }

  static private boolean jj_3R_57()
 {
    if (jj_3R_11()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(S_CORCHETE_A)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    if (jj_scan_token(S_CORCHETE_C)) return true;
    if (jj_scan_token(S_SALTO)) return true;
    return false;
  }

  static private boolean jj_3R_35()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_49()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(S_SALTO)) return true;
    return false;
  }

  static private boolean jj_3R_49()
 {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_48()
 {
    if (jj_3R_12()) return true;
    if (jj_scan_token(S_SALTO)) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    if (jj_scan_token(S_PUNTO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    return false;
  }

  static private boolean jj_3R_28()
 {
    if (jj_scan_token(PR_UNTIL)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(S_SALTO)) return true;
    return false;
  }

  static private boolean jj_3_59()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_34()
 {
    if (jj_3R_49()) return true;
    if (jj_scan_token(S_SALTO)) return true;
    return false;
  }

  static private boolean jj_3_45()
 {
    if (jj_scan_token(PR_PUTS)) return true;
    return false;
  }

  static private boolean jj_3_30()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_37()
 {
    if (jj_scan_token(PR_EMPTY)) return true;
    return false;
  }

  static private boolean jj_3R_50()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_29()
 {
    if (jj_3R_23()) return true;
    if (jj_scan_token(S_SALTO)) return true;
    return false;
  }

  static private boolean jj_3_28()
 {
    if (jj_3R_22()) return true;
    if (jj_scan_token(S_SALTO)) return true;
    return false;
  }

  static private boolean jj_3_44()
 {
    if (jj_scan_token(PR_EACH)) return true;
    if (jj_scan_token(PR_DO)) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_27()
 {
    if (jj_3R_21()) return true;
    if (jj_scan_token(S_SALTO)) return true;
    return false;
  }

  static private boolean jj_3_43()
 {
    if (jj_scan_token(PR_NEW)) return true;
    return false;
  }

  static private boolean jj_3_42()
 {
    if (jj_scan_token(PR_TO_I)) return true;
    return false;
  }

  static private boolean jj_3_41()
 {
    if (jj_scan_token(PR_TO_F)) return true;
    return false;
  }

  static private boolean jj_3_40()
 {
    if (jj_scan_token(PR_TO_S)) return true;
    return false;
  }

  static private boolean jj_3_39()
 {
    if (jj_scan_token(PR_CLASS)) return true;
    return false;
  }

  static private boolean jj_3R_27()
 {
    if (jj_scan_token(PR_WHILE)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(S_SALTO)) return true;
    return false;
  }

  static private boolean jj_3_58()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_41()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  static private boolean jj_3_36()
 {
    if (jj_scan_token(S_PUNTO)) return true;
    if (jj_scan_token(PR_CHOMP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_scan_token(PR_UNLESS)) return true;
    if (jj_3R_10()) return true;
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    if (jj_scan_token(S_SALTO)) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(OAS_ASIGNA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_39()
 {
    if (jj_scan_token(S_COMA)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_29()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_57()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(S_PUNTO)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(S_SALTO)) return true;
    return false;
  }

  static private boolean jj_3_23()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_26()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_25()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_24()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_61()
 {
    if (jj_scan_token(OA_POTENCIA)) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(S_PUNTO)) return true;
    if (jj_scan_token(PR_GETS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_22()
 {
    if (jj_3R_12()) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_21()
 {
    if (jj_3R_10()) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_20()
 {
    if (jj_3R_12()) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_19()
 {
    if (jj_3R_10()) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_18()
 {
    if (jj_3R_12()) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_17()
 {
    if (jj_3R_10()) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_16()
 {
    if (jj_3R_12()) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_15()
 {
    if (jj_3R_10()) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_58()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_14()
 {
    if (jj_3R_12()) return true;
    if (jj_3R_14()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_13()
 {
    if (jj_3R_10()) return true;
    if (jj_3R_14()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_12()
 {
    if (jj_3R_12()) return true;
    if (jj_3R_14()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_3R_10()) return true;
    if (jj_3R_14()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_38()
 {
    if (jj_3R_12()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_scan_token(S_CORCHETE_A)) return true;
    if (jj_3R_12()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(S_CORCHETE_C)) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_3R_10()) return true;
    if (jj_3R_13()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    if (jj_scan_token(PR_IF)) return true;
    if (jj_3R_10()) return true;
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    if (jj_scan_token(S_SALTO)) return true;
    return false;
  }

  static private boolean jj_3_35()
 {
    if (jj_3R_10()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_60()
 {
    if (jj_scan_token(S_MULTIPLICA)) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_3R_12()) return true;
    if (jj_3R_11()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_3R_10()) return true;
    if (jj_3R_11()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_3R_10()) return true;
    if (jj_3R_13()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_12()) return true;
    if (jj_3R_11()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_10()) return true;
    if (jj_3R_11()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_31()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3_56()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_55()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_59()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_54()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_53()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_52()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_54()
 {
    if (jj_scan_token(S_COMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_55()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_48()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_53()
 {
    if (jj_scan_token(S_COMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  static private boolean jj_3R_33()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_45()
 {
    if (jj_scan_token(PR_SELF)) return true;
    if (jj_scan_token(S_PUNTO)) return true;
    return false;
  }

  static private boolean jj_3R_32()
 {
    if (jj_scan_token(OC_MENOR_QUE)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_34()
 {
    if (jj_scan_token(ID_CLASS)) return true;
    return false;
  }

  static private boolean jj_3_33()
 {
    if (jj_scan_token(ID_GLOBAL)) return true;
    return false;
  }

  static private boolean jj_3_32()
 {
    if (jj_scan_token(ID_CONSTANT)) return true;
    return false;
  }

  static private boolean jj_3R_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_31()
 {
    if (jj_scan_token(ID_LOCAL)) return true;
    return false;
  }

  static private boolean jj_3R_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(69)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_52()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_30()
 {
    if (jj_scan_token(PR_DEF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    if (jj_scan_token(S_SALTO)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(PR_END)) return true;
    if (jj_scan_token(S_SALTO)) return true;
    return false;
  }

  static private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_36()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_67()
 {
    if (jj_scan_token(S_PAREN_A)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(S_PAREN_C)) return true;
    return false;
  }

  static private boolean jj_3R_66()
 {
    if (jj_scan_token(VAL_CADENA2)) return true;
    return false;
  }

  static private boolean jj_3R_65()
 {
    if (jj_scan_token(VAL_DECIMAL)) return true;
    return false;
  }

  static private boolean jj_3R_64()
 {
    if (jj_scan_token(VAL_CADENA)) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    }
    return false;
  }

  static private boolean jj_3R_63()
 {
    if (jj_scan_token(VAL_ENTERO)) return true;
    return false;
  }

  static private boolean jj_3_51()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_9()
 {
    if (jj_scan_token(PR_CLASS)) return true;
    if (jj_3R_10()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    if (jj_scan_token(S_SALTO)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(PR_END)) return true;
    if (jj_scan_token(S_SALTO)) return true;
    return false;
  }

  static private boolean jj_3_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    return false;
  }

  static private boolean jj_3R_7()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_62()
 {
    if (jj_scan_token(ID_LOCAL)) return true;
    return false;
  }

  static private boolean jj_3_47()
 {
    if (jj_scan_token(PR_PRINTF)) return true;
    return false;
  }

  static private boolean jj_3R_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_51()
 {
    if (jj_scan_token(S_PUNTO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    return false;
  }

  static private boolean jj_3R_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_50()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MCVillCompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3c0c000,0xc00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc00000,0x0,0x0,0xc00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc00000,0xc00000,0x0,0xc00000,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0xc00000,0x80000,0xc00000,0xc00000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1038b00,0x0,0x0,0x0,0x60000000,0x0,0x60000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x500000,0x0,0x500000,0x0,0x0,0x18000000,0x0,0x1c000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x10,0x3c00,0x10,0x3c00,0x0,0xc0000000,0x7fc000,0x3f000000,0x0,0x0,0xc0000000,0xc0000000,0x0,0x40,0x0,0x2,0x0,0x2,0x2,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x10,0x40,0x1000,0x20,0x10,0x0,0x0,0x0,0x0,0x0,0x10000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x2ff0,0x2ff0,0x2f00,0x1f0,0x0,0x1f0,0x0,0xe,0x0,0x0,0x0,0x200,0x1f0,0x0,0x0,0x1f0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x2f00,0x1f0,0x1f0,0x0,0x1f0,0x0,0x0,0x0,0x2f00,0x0,0x2f00,0x0,0x1f0,0x0,0x1f0,0x1f0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[59];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MCVillCompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MCVillCompiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MCVillCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MCVillCompiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MCVillCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MCVillCompiler(MCVillCompilerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MCVillCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[111];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 43; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 111; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 59; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }
