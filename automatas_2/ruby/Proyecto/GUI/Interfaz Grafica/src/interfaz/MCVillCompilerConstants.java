/* Generated By:JavaCC: Do not edit this line. MCVillCompilerConstants.java */
package interfaz;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MCVillCompilerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PR_ALIAS = 10;
  /** RegularExpression Id. */
  int PR_AND = 11;
  /** RegularExpression Id. */
  int PR_BREAK = 12;
  /** RegularExpression Id. */
  int PR_CASE = 13;
  /** RegularExpression Id. */
  int PR_CLASS = 14;
  /** RegularExpression Id. */
  int PR_DEF = 15;
  /** RegularExpression Id. */
  int PR_DEFINED = 16;
  /** RegularExpression Id. */
  int PR_DO = 17;
  /** RegularExpression Id. */
  int PR_ELSE = 18;
  /** RegularExpression Id. */
  int PR_ELSIF = 19;
  /** RegularExpression Id. */
  int PR_END = 20;
  /** RegularExpression Id. */
  int PR_ENSURE = 21;
  /** RegularExpression Id. */
  int PR_FALSE = 22;
  /** RegularExpression Id. */
  int PR_TRUE = 23;
  /** RegularExpression Id. */
  int PR_FOR = 24;
  /** RegularExpression Id. */
  int PR_IF = 25;
  /** RegularExpression Id. */
  int PR_IN = 26;
  /** RegularExpression Id. */
  int PR_MODULE = 27;
  /** RegularExpression Id. */
  int PR_NEXT = 28;
  /** RegularExpression Id. */
  int PR_NIL = 29;
  /** RegularExpression Id. */
  int PR_NOT = 30;
  /** RegularExpression Id. */
  int PR_OR = 31;
  /** RegularExpression Id. */
  int PR_REDO = 32;
  /** RegularExpression Id. */
  int PR_RESCUE = 33;
  /** RegularExpression Id. */
  int PR_RETRY = 34;
  /** RegularExpression Id. */
  int PR_RETURN = 35;
  /** RegularExpression Id. */
  int PR_SELF = 36;
  /** RegularExpression Id. */
  int PR_SUPER = 37;
  /** RegularExpression Id. */
  int PR_THEN = 38;
  /** RegularExpression Id. */
  int PR_UNDEF = 39;
  /** RegularExpression Id. */
  int PR_UNLESS = 40;
  /** RegularExpression Id. */
  int PR_UNTIL = 41;
  /** RegularExpression Id. */
  int PR_WHEN = 42;
  /** RegularExpression Id. */
  int PR_WHILE = 43;
  /** RegularExpression Id. */
  int PR_YIELD = 44;
  /** RegularExpression Id. */
  int PR_FILE = 45;
  /** RegularExpression Id. */
  int PR_LINE = 46;
  /** RegularExpression Id. */
  int PR_PRINT = 47;
  /** RegularExpression Id. */
  int PR_PRINTF = 48;
  /** RegularExpression Id. */
  int PR_PUTS = 49;
  /** RegularExpression Id. */
  int PR_GETS = 50;
  /** RegularExpression Id. */
  int PR_CHOMP = 51;
  /** RegularExpression Id. */
  int PR_TO_I = 52;
  /** RegularExpression Id. */
  int PR_TO_S = 53;
  /** RegularExpression Id. */
  int PR_TO_F = 54;
  /** RegularExpression Id. */
  int PR_NEW = 55;
  /** RegularExpression Id. */
  int PR_P = 56;
  /** RegularExpression Id. */
  int PR_EACH = 57;
  /** RegularExpression Id. */
  int PR_EMPTY = 58;
  /** RegularExpression Id. */
  int PR_UPCASE = 59;
  /** RegularExpression Id. */
  int PR_INCLUDE = 60;
  /** RegularExpression Id. */
  int S_SUMA = 61;
  /** RegularExpression Id. */
  int S_MULTIPLICA = 62;
  /** RegularExpression Id. */
  int S_LLAVE_A = 63;
  /** RegularExpression Id. */
  int S_LLAVE_C = 64;
  /** RegularExpression Id. */
  int S_PUNTO = 65;
  /** RegularExpression Id. */
  int S_CORCHETE_A = 66;
  /** RegularExpression Id. */
  int S_CORCHETE_C = 67;
  /** RegularExpression Id. */
  int S_PAREN_A = 68;
  /** RegularExpression Id. */
  int S_PAREN_C = 69;
  /** RegularExpression Id. */
  int S_COMA = 70;
  /** RegularExpression Id. */
  int S_PUNTO_COMA = 71;
  /** RegularExpression Id. */
  int S_PUNTOS = 72;
  /** RegularExpression Id. */
  int S_BARRA = 73;
  /** RegularExpression Id. */
  int OA_RESTA = 74;
  /** RegularExpression Id. */
  int OA_DIVICION = 75;
  /** RegularExpression Id. */
  int OA_POTENCIA = 76;
  /** RegularExpression Id. */
  int OA_MOD_DIV = 77;
  /** RegularExpression Id. */
  int OC_IGUAL_QUE = 78;
  /** RegularExpression Id. */
  int OC_DIFERENTE_DE = 79;
  /** RegularExpression Id. */
  int OC_MENOR_QUE = 80;
  /** RegularExpression Id. */
  int OC_MAYOR_QUE = 81;
  /** RegularExpression Id. */
  int OC_MENOR_O_IGUAL = 82;
  /** RegularExpression Id. */
  int OC_MAYOR_O_IGUAL = 83;
  /** RegularExpression Id. */
  int OC_IGUALDAD_WHEN = 84;
  /** RegularExpression Id. */
  int OC_COMBINADO = 85;
  /** RegularExpression Id. */
  int OC_QUESTION = 86;
  /** RegularExpression Id. */
  int OAS_ASIGNA = 87;
  /** RegularExpression Id. */
  int OAS_SUMA_ASIGNA = 88;
  /** RegularExpression Id. */
  int OAS_RESTA_ASIGNA = 89;
  /** RegularExpression Id. */
  int OAS_MULTIPLICACION_ASIGNA = 90;
  /** RegularExpression Id. */
  int OAS_DIVICION_ASIGNA = 91;
  /** RegularExpression Id. */
  int OC_MODULO_ASIGNA = 92;
  /** RegularExpression Id. */
  int OC_POTENCIA_ASIGNA = 93;
  /** RegularExpression Id. */
  int ORA_RANGO = 94;
  /** RegularExpression Id. */
  int ORA_RANGO1 = 95;
  /** RegularExpression Id. */
  int OACC_CONSTANTES = 96;
  /** RegularExpression Id. */
  int OL_AND = 97;
  /** RegularExpression Id. */
  int OL_OR = 98;
  /** RegularExpression Id. */
  int OL_NOT = 99;
  /** RegularExpression Id. */
  int VAL_CADENA = 100;
  /** RegularExpression Id. */
  int VAL_CADENA2 = 101;
  /** RegularExpression Id. */
  int VAL_ENTERO = 102;
  /** RegularExpression Id. */
  int VAL_DECIMAL = 103;
  /** RegularExpression Id. */
  int ID_LOCAL = 104;
  /** RegularExpression Id. */
  int ID_INSTANCE = 105;
  /** RegularExpression Id. */
  int ID_CLASS = 106;
  /** RegularExpression Id. */
  int ID_GLOBAL = 107;
  /** RegularExpression Id. */
  int ID_BLOCK = 108;
  /** RegularExpression Id. */
  int ID_CONSTANT = 109;
  /** RegularExpression Id. */
  int S_SALTO = 110;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int COMENTARIO = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "<token of kind 4>",
    "\"=begin\"",
    "\"#\"",
    "\"=end\"",
    "\"\\n\"",
    "<token of kind 9>",
    "\"alias\"",
    "\"and\"",
    "\"break\"",
    "\"case\"",
    "\"class\"",
    "\"def\"",
    "\"defined\"",
    "\"do\"",
    "\"else\"",
    "\"elsif\"",
    "\"end\"",
    "\"ensure\"",
    "\"false\"",
    "\"true\"",
    "\"for\"",
    "\"if\"",
    "\"in\"",
    "\"module\"",
    "\"next\"",
    "\"nil\"",
    "\"not\"",
    "\"or\"",
    "\"redo\"",
    "\"rescue\"",
    "\"retry\"",
    "\"return\"",
    "\"self\"",
    "\"super\"",
    "\"then\"",
    "\"undef\"",
    "\"unless\"",
    "\"until\"",
    "\"when\"",
    "\"while\"",
    "\"yield\"",
    "\"_FILE_\"",
    "\"_LINE_\"",
    "\"print\"",
    "\"printf\"",
    "\"puts\"",
    "\"gets\"",
    "\"chomp\"",
    "\"to_i\"",
    "\"to_s\"",
    "\"to_f\"",
    "\"new\"",
    "\"p\"",
    "\"each\"",
    "\"empty\"",
    "\"upcase\"",
    "\"include\"",
    "\"+\"",
    "\"*\"",
    "\"{\"",
    "\"}\"",
    "\".\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\"|\"",
    "\"-\"",
    "\"/\"",
    "\"**\"",
    "\"%\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"===\"",
    "\"<=>\"",
    "\"?\"",
    "\"=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"**=\"",
    "\"..\"",
    "\"...\"",
    "\"::\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "<VAL_CADENA>",
    "<VAL_CADENA2>",
    "<VAL_ENTERO>",
    "<VAL_DECIMAL>",
    "<ID_LOCAL>",
    "<ID_INSTANCE>",
    "<ID_CLASS>",
    "<ID_GLOBAL>",
    "<ID_BLOCK>",
    "<ID_CONSTANT>",
    "<S_SALTO>",
  };

}
