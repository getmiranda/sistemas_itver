/* MCVillCompiler.java */
/* Generated By:JavaCC: Do not edit this line. MCVillCompiler.java */
        //Librerias
        import java.io.IOException;
        import java.util.ArrayList;

        //Clase que ejecuta el parser
        public class MCVillCompiler implements MCVillCompilerConstants {

                private static FileManager file = new FileManager();
                private static FileManager file2 = new FileManager();
                private static FileManager file3 = new FileManager();
                private static IOManager iom = new IOManager(file, file2, file3);
                private static SemanticManager sm = new SemanticManager();
                private static ArrayList<Token> listValues = new ArrayList<Token>();
                private static boolean band = true;

                public static void main( String[] MCVillArgs ) {

                        //Declaracion del analizador lÃ©xico
                        MCVillCompiler lex;


                        //Si el usuario escribe en la consola
                        if ( MCVillArgs.length == 0 ) {
                                System.out.println( "MCVill:> Leyendo de entrada estandar...\u005cn" );
                                lex = new MCVillCompiler( System.in );
                        }

                        //Si el usuario le pasa un archivo para analizar
                        else if ( MCVillArgs.length == 1 ) {
                                System.out.println( "MCVill:> Leyendo de fichero " + MCVillArgs[0] + " ...\u005cn" );

                                try {
                                        lex = new MCVillCompiler( new java.io.FileInputStream( MCVillArgs[0] ) );
                                } catch( java.io.FileNotFoundException e ) {
                                        System.out.println( "MCVill:> El fichero " + MCVillArgs[0] + " no ha sido encontrado." );
                                        return;
                                }
                        }

                        //Si el usuario no sabe usarlo
                        else {
                                System.out.println ("MCVill:> Debes utilizarlo de una de las siguientes formas:");
                                System.out.println ("         java MCVill < fichero");
                                System.out.println ("Or");
                                System.out.println ("         java MCVill fichero");
                                return;
                        }

                        //Ejecucion del Analizador
                        try{
                                file.crearFile("out\u005c\u005cMCVill_lexical_Output.txt");
                                file2.crearFile("out\u005c\u005cMCVill_Syntax_Output.txt");
                                file3.crearFile("out\u005c\u005cMCVill_Sitactic_Output.txt");
                                lex.start();
                                System.out.println( "\u005cnMCVill:> La entrada ha sido leida con exito.");
                                file.cerrarFile();
                                file2.cerrarFile();
                                file3.cerrarFile();
                        }

                        catch(TokenMgrError e){
                                System.out.println( "\u005cnMCVill:> Ha ocurrido un error lexico.");
                                System.out.println( "Detalles: " + e.getMessage());
                        }
                        catch(ParseException pe){
                                iom.errorSyntax(pe);
                                Token t = getToken(0);
                                while(t.image == "\u005cn"){
                                        t = getNextToken();
                                }
                        }
                }

//GRAMÃ?TICAS
  static final public void start() throws ParseException {
    program();
  }

//************************************* PROGRAMA *************************************************
  static final public void program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID_LOCAL:
      case ID_INSTANCE:
      case ID_CLASS:
      case ID_GLOBAL:
      case ID_CONSTANT:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      declara();
      jj_consume_token(S_SALTO);
    }
    jj_consume_token(0);
  }

//************************************* DECLARACIONES ***************************************
  static final public void declara() throws ParseException {Token id;
        String type = null;
    try {
      id = varname();
      jj_consume_token(OAS_ASIGNA);
      valor();
for( int i = 0; i < listValues.size(); i++ )
                                                                  {
                                                                        for (int j = 0; j < listValues.size(); j++ )
                                                                        {
                                                                                type = sm.compareTypes( listValues.get( i ), listValues.get( j ) );
                                                                        }
                                                                  }
                                                                  sm.addVariable( id, type );
                                                                  listValues.clear();
    } catch (ParseException e) {
iom.errorSyntax(e);
                /*Token t;
		do {
			t = getNextToken();
			System.out.println(t.image);
		} while ( t.kind != MCVillCompilerTokenManager.EOF || t.image != "\n");*/
                /*Token t = getToken(0);
		System.out.println(t.image);
		while(t.image != "\n"){
			t = getNextToken();
			//System.out.println(t.image);

		}*/

    } catch (SemanticException se) {
iom.errorSemantic(se);
                /*Token t;
		do {
			t = getToken(0);
			System.out.println(t.image);
		} while ( t.kind != MCVillCompilerTokenManager.EOF);*/
                /*
		Token t = getToken(0);
		System.out.println(t.image);
		while(t.image == "\n"){
			t = getNextToken();
			System.out.println(t.image);
		}*/

    }
  }

//************************************** VALORES *****************************************************
  static final public void valor() throws ParseException, SemanticException {
    expr();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_SUMA:
      case S_MULTIPLICA:
      case OA_RESTA:
      case OA_DIVICION:
      case OA_POTENCIA:
      case OA_MOD_DIV:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      op_arit();
      expr();
    }
  }

//**************************************** EXPRESIONES ***************************************
  static final public 
void expr() throws ParseException {Token id;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID_LOCAL:{
        //"b"
                                  id = jj_consume_token(ID_LOCAL);
sm.checkVariable( id );
                                                                                  listValues.add( id );
        break;
        }
      case VAL_ENTERO:{
        id = jj_consume_token(VAL_ENTERO);
listValues.add( id );
        break;
        }
      case VAL_CADENA:{
        id = jj_consume_token(VAL_CADENA);
listValues.add( id );
        break;
        }
      case VAL_DECIMAL:{
        id = jj_consume_token(VAL_DECIMAL);
listValues.add( id );
        break;
        }
      case VAL_CADENA2:{
        id = jj_consume_token(VAL_CADENA2);
listValues.add( id );
        break;
        }
      case S_PAREN_A:{
        jj_consume_token(S_PAREN_A);
        valor();
        jj_consume_token(S_PAREN_C);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
iom.errorSyntax(e);
    } catch (SemanticException se) {
iom.errorSemantic(se);
    }
  }

//**************************************** OPERADORES ARITMETICOS ***************************************
  static final public 
void op_arit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OA_RESTA:{
      jj_consume_token(OA_RESTA);
      break;
      }
    case S_SUMA:{
      jj_consume_token(S_SUMA);
      break;
      }
    case S_MULTIPLICA:{
      jj_consume_token(S_MULTIPLICA);
      break;
      }
    case OA_DIVICION:{
      jj_consume_token(OA_DIVICION);
      break;
      }
    case OA_MOD_DIV:{
      jj_consume_token(OA_MOD_DIV);
      break;
      }
    case OA_POTENCIA:{
      jj_consume_token(OA_POTENCIA);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//**************************************** VARIABLES ***************************************
  static final public Token varname() throws ParseException {Token id;
    if (jj_2_1(5)) {
      id = jj_consume_token(ID_LOCAL);
    } else if (jj_2_2(5)) {
      id = jj_consume_token(ID_CONSTANT);
    } else if (jj_2_3(5)) {
      id = jj_consume_token(ID_GLOBAL);
    } else if (jj_2_4(5)) {
      id = jj_consume_token(ID_CLASS);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID_INSTANCE:{
        id = jj_consume_token(ID_INSTANCE);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return id;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3_4()
 {
    if (jj_scan_token(ID_CLASS)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(ID_GLOBAL)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(ID_CONSTANT)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(ID_LOCAL)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MCVillCompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0xf00600,0x10000,0xf00600,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x17800,0x0,0xf80,0x0,0x1000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MCVillCompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MCVillCompiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MCVillCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MCVillCompiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MCVillCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MCVillCompiler(MCVillCompilerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MCVillCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }
